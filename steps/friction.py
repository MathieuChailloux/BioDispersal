# -*- coding: utf-8 -*-
"""
/***************************************************************************
 BioDispersal
                                 A QGIS plugin
 Computes ecological continuities based on environments permeability
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2018-04-12
        git sha              : $Format:%H$
        copyright            : (C) 2018 by IRSTEA
        email                : mathieu.chailloux@irstea.fr
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import csv
import os

from PyQt5.QtCore import Qt, QModelIndex
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QFileDialog
from qgis.core import Qgis
from qgis.gui import QgsFileWidget

from ..qgis_lib_mc import utils, qgsUtils, qgsTreatments, abstract_model, feedbacks, styles
from . import params, subnetworks, classes


class FrictionRowItem(abstract_model.DictItem):

    def __init__(self,dict):
        super().__init__(dict)
            

class FrictionModel(abstract_model.ExtensiveTableModel):

    def __init__(self,parentModel):
        self.parser_name = "FrictionModel"
        self.is_runnable = False
        abstract_model.ExtensiveTableModel.__init__(self,parentModel)
        self.feedback.pushDebugInfo("hey")
        
    def reload(self):
        colNames = self.parentModel.speciesModel.getNames()
        
    def getFreeVals(self,nbVals):
        codes = [ i.dict[self.ROW_CODE] for i in self.items ]
        freeVals = getIntValues(nbVals)
        return freeVals
        
    def getHeaderStr(self,col):
        if col < 2:
            h = [self.tr('Value'),self.tr('Description')]
            return h
        return None
        
    # Reload items of model to match current ClassModel.
    def reloadClasses(self):
        utils.debug("reloadClasses")
        classes_to_delete = []
        for item in self.items:
            cls_name = item.dict["class"]
            cls_item = self.parentModel.classModel.getClassByName(cls_name)
            if not cls_item:
                classes_to_delete.append(cls_name)
                utils.debug("Removing class " + str(cls_name))
            else:
                utils.debug("Class " + cls_name + " indeed exists")
        self.items = [fr for fr in self.items if fr.dict["class"] not in classes_to_delete]
        self.layoutChanged.emit()
        for cls_item in self.parentModel.classModel.items:
            utils.debug("cls_item : " + str(cls_item.dict))
            cls_name = cls_item.dict["name"]
            cls_code = cls_item.dict["code"]
            cls_descr = cls_item.dict["descr"]
            row_item = self.getRowByClass(cls_name)
            if row_item:
                utils.debug("row_item : " + str(row_item.dict))
                utils.debug("Class " + str(cls_name) + " already exists")
                if row_item.dict["code"] != cls_code:
                    utils.debug("Reassigning code '" + str(cls_code) + "' instead of '"
                                + str(row_item.dict["code"]) + " to class " + cls_name)
                    row_item.dict["code"] = cls_code
                    self.layoutChanged.emit()
                if cls_descr and row_item.dict["class_descr"] != cls_descr:
                    utils.debug("Reassigning descr '" + str(cls_descr) + "' instead of '"
                                + str(row_item.dict["class_descr"]) + " to class " + cls_name)
                    row_item.dict["class_descr"] = cls_descr
                    self.layoutChanged.emit()
            else:
                utils.debug("Reloading class " + cls_name)
                self.addClassItem(cls_item)
                self.layoutChanged.emit()
                
    # Computes friction layer for each item.
    def applyItemsWithContext(self,context,feedback,indexes):
        feedback.beginSection("Friction")
        self.parentModel.paramsModel.checkInit()
        all_st = self.parentModel.stModel.getSTList()
        st_list = [all_st[idx - 3] for idx in indexes]
        feedback.pushDebugInfo("st_list = " + str(st_list))
        reclass_matrixes = self.getReclassifyMatrixes(st_list)
        nb_items = len(reclass_matrixes)
        step_feedback = feedbacks.ProgressMultiStepFeedback(nb_items,feedback)
        curr_step = 0
        for st_name, matrix in reclass_matrixes.items():
            feedback.setProgressText("computing subnetwork '" + st_name + "'")
            feedback.pushInfo("Friction computation for subnetwork " + str(st_name))
            in_path = self.parentModel.stModel.getMergedPath(st_name)
            utils.checkFileExists(in_path)
            out_path = self.parentModel.stModel.getFrictionPath(st_name)
            qgsUtils.removeRaster(out_path)
            self.checkInVals(in_path)
            qgsTreatments.applyReclassifyByTable(in_path,matrix,out_path,
                                                 out_type=Qgis.Float32,boundaries_mode=2,
                                                 context=context,feedback=step_feedback)
            loaded_layer = qgsUtils.loadRasterLayer(out_path,loadProject=True)
            styles.setRendererPalettedGnYlRd(loaded_layer)
            curr_step += 1
            step_feedback.setCurrentStep(curr_step)
        feedback.endSection()
           
           
class FrictionConnector(abstract_model.AbstractConnector):
    
    def __init__(self,dlg,frictionModel):
        self.dlg = dlg
        super().__init__(frictionModel,self.dlg.frictionView,
                         selectionCheckbox=self.dlg.frictRunOnlySelection)
        
    def initGui(self):
        pass
        
    def connectComponents(self):
        super().connectComponents()
        self.dlg.frictionLoadClass.clicked.connect(self.model.reloadClasses)
        self.dlg.frictionRun.clicked.connect(self.applyItems)
        self.dlg.frictionSave.clicked.connect(self.saveCSVAction)
        self.dlg.frictionLoad.clicked.connect(self.loadCSVAction)
        
    # Return indexes currently selected in friction view
    def getSelectedIndexes(self):
        if self.onlySelection:
            indexes = list(set([i.column() for i in self.view.selectedIndexes()]))
        else:
            indexes = range(3,len(self.model.fields))
        nb_indexes = len(indexes)
        if nb_indexes == 0:
            utils.user_error("No subnetwork selected for friction step")
        nb_st = len(self.model.parentModel.stModel.getSTList())
        utils.debug("nb_st = " + str(nb_st))
        for idx in indexes:
            st_idx = idx - 3
            if st_idx < 0 or st_idx >= nb_st:
                utils.user_error("Column " + str(idx) + " selected is not a subnetwork")
        return indexes
        
    # Updates model with items loaded from file 'fname'
    def loadCSV(self,fname):
        utils.checkFileExists(fname)
        self.model.fromCSVUpdate(fname)
        utils.info("Friction loaded from '" + str(fname))
        
    # Opens file dialog and loads model from selected CSV file.
    def loadCSVAction(self):
        utils.debug("loadCSVAction " + str(self))
        fname = qgsUtils.openFileDialog(parent=self.dlg,
                                      msg=self.tr("Open CSV file"),
                                      filter="*.csv")
        if fname:
            self.loadCSV(fname)
            
    def saveCSV(self,fname):
        self.model.saveCSV(fname)
     
    def saveCSVAction(self):
        utils.debug("saveCSVAction")
        fname = qgsUtils.saveFileDialog(parent=self.dlg,
                                      msg="Save friction as CSV file",
                                      filter="*.csv")
        if fname:
            self.saveCSV(fname)
        
