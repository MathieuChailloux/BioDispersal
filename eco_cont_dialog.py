# -*- coding: utf-8 -*-
"""
/***************************************************************************
 BioDispersal
                                 A QGIS plugin
 Computes ecological continuities based on environments permeability
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2018-04-12
        git sha              : $Format:%H$
        copyright            : (C) 2018 by IRSTEA
        email                : mathieu.chailloux@irstea.fr
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import sys

from PyQt5 import uic
from PyQt5 import QtWidgets
from PyQt5.QtGui import *
from PyQt5.QtCore import *
import processing
from processing.gui import AlgorithmDialog
from qgis.core import *
from qgis.gui import *
from qgis.gui import QgsFileWidget

from .utils import *
from .qgsUtils import *
import params
import sous_trames
import groups
from .selection import SelectionConnector
from .fusion import FusionConnector
import friction
from .ponderation import PonderationConnector
from .cost import CostConnector
from .config_parsing import *

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'eco_cont_dialog_base.ui'))
    
class EcologicalContinuityDialog(QtWidgets.QDialog,FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(EcologicalContinuityDialog, self).__init__(parent)
        #super().__init__()
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        #metagroupConnector = Metagroups(self)
        #self.groupConnector = Groups(self,metagroupConnector.metaclassModel)
        #rasterizationConnector = Rasterization(self)
        #self.tabs=[Groups(self),
        #            Metagroups(self),
        #            VectorSelections(self),
        #            Rasterization(self)]
        #self.tabs = [self.groupConnector,metagroupConnector,rasterizationConnector]
        self.setupUi(self)
        #self.connectComponents()
        
    # Initialize plugin tabs.
    # One tab <=> one connector.
    def initTabs(self):
        paramsConnector = params.ParamsConnector(self)
        params.params = paramsConnector.model
        stConnector = sous_trames.STConnector(self)
        sous_trames.stModel = stConnector.model
        groupsConnector = groups.GroupConnector(self)
        groups.groupsModel = groupsConnector.model
        classConnector = classes.ClassConnector(self)
        classes.classModel = classConnector.model
        selectionConnector = SelectionConnector(self)
        fusionConnector = FusionConnector(self)
        frictionConnector = friction.FrictionConnector(self)
        friction.frictionModel = frictionConnector.model
        ponderationConnector = PonderationConnector(self)
        costConnector = CostConnector(self)
        self.connectors = {"Params" : paramsConnector,
                           "ST" : stConnector,
                           "Group" : groupsConnector,
                           "Class" : classConnector,
                           "Selection" : selectionConnector,
                           "Fusion" : fusionConnector,
                           "Friction" : frictionConnector,
                           "Ponderation" : ponderationConnector,
                           "Cost" : costConnector}
        self.recomputeModels()
        
    # Initialize Graphic elements for each tab
    # TODO : resize
    def initGui(self):
        #scrollArea = QtWidgets.QScrollArea()
        #layout = QtWidgets.QVBoxLayout(self)
        #self.setLayout(layout)
        #layout.addWidget(self.scrollArea)
        #self.scrollArea.setWidgetResizable(True)
        self.geometry = self.geometry()
        self.x = self.x()
        self.y = self.y()
        self.width = self.width()
        self.height = self.height()
        step_x = self.width * 0.1
        step_y = self.height * 0.1
        new_w = self.width * 0.8
        new_h = self.height * 0.8
        #self.tabWidget.setGeometry(self.x + step_x, self.y + step_y, new_w, new_h)
        for k, tab in self.connectors.items():
            tab.initGui()
        saveIcon = QIcon(':plugins/eco_cont/icons/save.png')
        saveAsIcon = QIcon(':plugins/eco_cont/icons/save-as.png')
        loadIcon = QIcon(':plugins/eco_cont/icons/folder.svg')
        self.openProject.setIcon(loadIcon)
        self.saveProject.setIcon(saveIcon)
        self.saveProjectAs.setIcon(saveAsIcon)
        self.openProject.setToolTip("Ouvrir un projet BioDispersal")
        self.saveProject.setToolTip("Enregistrer le projet")
        self.saveProjectAs.setToolTip("Enregistrer le projet sous")
        self.projectFrame.hide()
        #self.pluginTabs.removeTab(5)
        
    # Connect view and model components for each tab
    def connectComponents(self):
        for k, tab in self.connectors.items():
            tab.connectComponents()
        # Main tab connectors
        self.saveModelPath.fileChanged.connect(self.saveModelAs)
        self.saveProjectAs.clicked.connect(self.saveModelAsAction)
        self.saveProjectButton.clicked.connect(self.saveModel)
        self.saveProject.clicked.connect(self.saveModel)
        self.loadModelPath.fileChanged.connect(self.loadModel)
        self.openProject.clicked.connect(self.loadModelAction)
        self.saveModelPath.setStorageMode(QgsFileWidget.SaveFile)
        self.loadModelPath.setStorageMode(QgsFileWidget.GetFile)
        
    def onResize(self,event):
        new_size = event.size()
        
    # Recompute self.models in case they have been reloaded
    def recomputeModels(self):
        self.models = {"ParamsModel" : params.params,
                        "STModel" : sous_trames.stModel,
                        "GroupModel" : groups.groupsModel,
                        "ClassModel" : classes.classModel,
                        "SelectionModel" : self.connectors["Selection"].model,
                        "FusionModel" : self.connectors["Fusion"].model,
                        "FrictionModel" : friction.frictionModel,
                        "PonderationModel" : self.connectors["Ponderation"].model,
                        "CostModel" : self.connectors["Cost"].model}
        
    # Return XML string describing project
    def toXML(self):
        xmlStr = "<ModelConfig>\n"
        for k, m in self.models.items():
            xmlStr += m.toXML() + "\n"
        xmlStr += "</ModelConfig>\n"
        debug("Final xml : \n" + xmlStr)
        return xmlStr

    # Save project to 'fname'
    def saveModelAs(self,fname):
        self.recomputeModels()
        xmlStr = self.toXML()
        params.params.projectFile = fname
        writeFile(fname,xmlStr)
        
    def saveModelAsAction(self):
        fname = params.saveFileDialog(parent=self,msg="Sauvegarder le projet sous",filter="*.xml")
        if fname:
            self.loadModel(fname)
        
    # Save project to projectFile if existing
    def saveModel(self):
        fname = params.params.projectFile
        checkFileExists(fname,"Project ")
        self.saveModelAs(fname)
   
    # Load project from 'fname' if existing
    def loadModel(self,fname):
        debug("loadModel " + str(fname))
        checkFileExists(fname)
        setConfigModels(self.models)
        params.params.projectFile = fname
        parseConfig(fname)
        
    def loadModelAction(self):
        fname = params.openFileDialog(parent=self,msg="Ouvrir le projet",filter="*.xml")
        if fname:
            self.loadModel(fname)
            
            
class BioDispersalDialog(QgsProcessingAlgorithmDialogBase):

    def __init__(self):
        super().__init__()
        self.eco_dlg = EcologicalContinuityDialog()
        #self.tabWidget().removeTab(0)
        nb_tabs = self.eco_dlg.pluginTabs.count()
        for n in range(0,nb_tabs):
            n_widget = self.eco_dlg.pluginTabs.widget(0)
            n_text = self.eco_dlg.pluginTabs.tabText(0)
            self.tabWidget().insertTab(n,n_widget,n_text)
        w1 = self.eco_dlg.mainTab
        scroll_area = QtWidgets.QScrollArea()
        scroll_area.setWidget(w1)
        self.tabWidget().insertTab(0,scroll_area,"test_scroll")
        #self.setMainWidget(self.eco_dlg)
        #self.setMainWidget(self.eco_dlg.pluginTabs)
        #self.tabWidget().insertTab(0,EcologicalContinuityDialog(),"test")scroll = QtGui.QScrollableArea()
        # mw = self.tabWidget().widget(0)
        # fw1 = QgsFileWidget(parent=mw)
        # fw2 = QgsFileWidget(parent=mw)
        # fw3 = QgsFileWidget(parent=mw)
        # fw4 = QgsFileWidget(parent=mw)
        # tn = QtWidgets.QLineEdit(parent=mw)
        # fw5 = QgsFileWidget(parent=mw)
        # fw2.setMinimumHeight(100)
        # fw2.setMaximumHeight(200)
        # fw3.setMinimumHeight(200)
        # fw3.setMaximumHeight(300)
        # fw4.setMinimumHeight(300)
        # fw4.setMaximumHeight(400)
        # scroll = QtWidgets.QScrollArea()
        # scroll.setWidget(mw)
        # scroll.setWidgetResizable(True)
        # scroll.setFixedHeight(400)
        # layout = QVBoxLayout(self)
        # layout.addWidget
        # layout.addWidget(scroll)
        # scrollArea = QtWidgets.QScrollArea()
        # layout = QVBoxLayout()
        # mw.setLayout(layout)
        # scrollArea.setWidget(self.tabWidget())
        # scrollArea.setWidgetResizable(True)
        
        
    
        