# -*- coding: utf-8 -*-
"""
/***************************************************************************
 EcologicalContinuityDialog
                                 A QGIS plugin
 Computes ecological continuities based on environments permeability
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2018-04-12
        git sha              : $Format:%H$
        copyright            : (C) 2018 by IRSTEA
        email                : mathieu.chailloux@irstea.fr
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from PyQt5 import uic
from PyQt5 import QtWidgets
import processing
import datetime
from qgis.core import *
from qgis.gui import *

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'eco_cont_dialog_base.ui'))


class EcologicalContinuityDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(EcologicalContinuityDialog, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        
    def runCost(self):
        startRaster=self.rasterDepartComboBox.currentLayer()
        permRaster=self.rasterPermComboBox.currentLayer()
        dateNow=datetime.datetime.now()
        print ("[" + str(dateNow) + "] startRaster = " + startRaster.name())
        parameters = { 'input' : permRaster,
                        'start_raster' : startRaster,
                        'max_cost' : 5000,
                        'output' : 'D:\\MChailloux\\PNRHL_QGIS\\tmpLayer_output.tif',
                        'start_coordinates' : '0,0',
                        'stop_coordinates' : '0,0',
                        'nearest' : 'D:\MChailloux\PNRHL_QGIS\tmpLayer_nearest.tif',
                        'outdir' : 'D:\MChailloux\PNRHL_QGIS\tmpLayer_movements.tif',
                        'start_points' :  None,
                        'stop_points' : None,
                        'null_cost' : None,
                        'memory' : 5000,
                        'GRASS_REGION_CELLSIZE_PARAMETER' : 50,
                        'GRASS_SNAP_TOLERANCE_PARAMETER' : -1,
                        'GRASS_MIN_AREA_PARAMETER' : 0,
                        '-k' : False,
                        '-n' : False,
                        '-r' : True,
                        '-i' : False,
                        '-b' : False};
        try:
            processing.run("grass7:r.cost",parameters)
            print ("call to r.cost successful")
        except Exception as e:
            print ("Failed to call r.cost : " + str(e))
            raise e
        #grass.run_command(start_raster=startRaster,input=permRaster,max_cost=?,output=?,memory=5000)
