# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Vector_selection
                                 A QGIS plugin
 Computes ecological continuities based on environments permeability
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2018-04-12
        git sha              : $Format:%H$
        copyright            : (C) 2018 by IRSTEA
        email                : mathieu.chailloux@irstea.fr
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

from PyQt5.QtWidgets import QTableWidgetItem
from .utils import *

class VectorSelection:
    
    def __init__(self,id,layer,expr,group):
        self.id = id
        self.layer = layer
        self.expr = expr
        self.group = group
        
    def __str__(self):
        return ("Selection(layer = " + self.layer.name() + ", expr = " + str(self.expr) + ", group " + self.group)
        
    def equals(self,other):
        return (self.layer.name() == other.layer.name() and self.expr == other.expr and self.group == other.group)


class VectorSelections:

    def __init__(self,dlg):
        self.dlg = dlg
        self.selections = []
        self.displayedSelections = []
        self.filter = ""
        
    def connectComponents(self):
        self.dlg.groupVectMapLayer.layerChanged.connect(self.updateGroupVectLayer)
        self.dlg.groupVectRun.clicked.connect(self.addSelection)
        self.dlg.groupVectRefresh.clicked.connect(self.refreshSelections)
        self.dlg.groupVectDelete.clicked.connect(self.deleteSelection)
        self.dlg.groupVectFilter.textChanged.connect(self.setFilter)
        
    #def unload(self):
    #    self.selections = []
    #    self.displayedSelections = []
    #    self.filter = ""
    
    def getSelection(self,id):
        for s in self.selections:
            if s.id == id:
                return s
        return None
        
    def updateGroupVectLayer(self,layer):
        self.dlg.groupVectFieldExpr.setLayer(layer)
        
    def setFilter(self,text):
        self.filter = text
        self.refreshSelections()
        
    def selectionExists(self,selection):
        for s in self.selections:
            if selection.equals(s):
                return True
        return False
        
    def addSelection(self):
        debug("[addSelection]")
        id = len(self.selections)
        layer = self.dlg.groupVectMapLayer.currentLayer()
        fieldExpr = self.dlg.groupVectFieldExpr.expression()
        group = self.dlg.groupVectGroup.currentText()
        selection = VectorSelection(id,layer,fieldExpr,group)
        if self.selectionExists(selection):
            warn("Selection already exists")
        else:
            debug("Adding selection " + str(selection))
            self.selections.append(selection)
            self.refreshSelections()
            
    def clearTable(self):
        debug("clearTable")
        self.dlg.groupVectTable.setRowCount(0)
            
    def refreshSelections(self):
        debug("[refreshSelections]")
        self.displayedSelections = []
        self.clearTable()
        for s in self.selections:
            debug("lauer " + s.layer.name())
            if self.filter in s.layer.name():
                debug("filter ok")
                n = self.dlg.groupVectTable.rowCount()
                self.displayedSelections.append(s)
                self.dlg.groupVectTable.insertRow(n)
                self.dlg.groupVectTable.setItem(n,0,QTableWidgetItem(str(s.id)))
                self.dlg.groupVectTable.setItem(n,1,QTableWidgetItem(s.layer.name()))
                self.dlg.groupVectTable.setItem(n,2,QTableWidgetItem(s.expr))
                self.dlg.groupVectTable.setItem(n,3,QTableWidgetItem(s.group))
            else:
                debug("filter ko")
                
    def deleteSelection(self):
        debug("deleteSelection")
        row = self.dlg.groupVectTable.currentRow()
        if row >= 0:
            debug("Removing row " + str(row))
            id = int(self.dlg.groupVectTable.item(row,0).text())
            selection = self.getSelection(id)
            self.selections.remove(selection)
            self.displayedSelections.remove(selection)
            for s in self.selections:
                if s.id >= id:
                    s.id -= 1
            #self.dlg.groupVectTable.removeRow(row)
            self.refreshSelections()
        else:
            warn("No row selected")
        
            
        