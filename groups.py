# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Utils
                                 A QGIS plugin
 Computes ecological continuities based on environments permeability
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2018-04-12
        git sha              : $Format:%H$
        copyright            : (C) 2018 by IRSTEA
        email                : mathieu.chailloux@irstea.fr
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

from .utils import *

class Group:

    def __init__(self,row,id,descr):
        self.row = row
        self.id = id
        self.descr = descr
        
    def updateID(self,id):
        old_id = self.id
        self.id = id
        debug("Group '" + old_id + "' renamed to '" + id + "'")
        
    def updateDescr(self,descr):
        old_descr = self.descr
        self.descr = descr
        debug("Group '" + str(self.id) + "' description changed from '" + old_descr + "' to '" + self.descr + "'")
        

class Groups:

    def __init__(self,dlg):
        self.dlg = dlg
        self.groups = []
        
    def connectComponents(self):
        self.dlg.groupTable.cellChanged.connect(self.updateTable)
        
    def getGroupAtRow(self,row):
        for group in self.groups:
            if group.row == row:
                return group
        internal_error("Could not find group at row '" + str(row) + "'")
        
    def addRow():
        for group in self.groups:
            group.row += 1
        self.groups.insert(0,Group(0,"",""))
            
    def delRow():
        pass
        
    def updateTable(self,row,col):
        group = self.getGroupAtRow(row)
        cell_val = self.dlg.groupTable.itemAt(row,col).text()
        if cell_val:
            if col == 0:
                old_key = self.groups(row,col)
                if old_key:
                    self.groups[cell_val] = self.groups[old_key]
                    del self.groups[old_key]
                    debug("Group '" + old_key + "' renamed to '" + cell_val + "'")
                else:
                    descr_val = self.dlg.groupTable.itemAt(row,1).text()
                    self.groups[cell_val] = ""
                    debug("Group '" + cell_val + " created with description '" + descr_val +"'")
            elif col == 1:
                key_val = self.dlg.groupTable.itemAt(row,0).text()
                if key_val:
                    old_descr = self.group[key_val]
                    self.groups[key_val] = cell_val
                    debug("Group '" + key_val + "' description changed from '" + old_descr + "' to '" + cell_val + "'")
            